/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
    
    &mt {
        flavor = "tap-preferred";
        tapping_term_ms = <200>;
    };

    &lt {
        flavor = "tap-preferred";
        quick-tap-ms = <0>;
        tapping_term_ms = <175>;
    };

#define MON_L LC(LA(LS(N4)))
#define MON_M LC(LA(LS(N5)))
#define MON_R LC(LA(LS(N6)))
#define MON_BL LC(LA(LS(N1)))
#define MAXWIN LG(LC(LA(LS(M))))
#define MEH LC(LS(LALT))
#define num 1
#define nav 2
#define fun 3
#define mac 4

/ {

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lhm: left_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1 2 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 37 39 40 41>;
            hold-trigger-on-release;
        };

        rhm: right_hand_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ltt: layer_tap_tp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAPTP";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        lth: layer_tap_hp {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAPHP";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };

        ltcw: layer_tap_capsword {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAPCW";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&caps_word>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };

        skmt: sticky_key_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_KEY_MOD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&skq>;
        };

        paren: paren {
            label = "Parenthesis";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp LPAR &kp RPAR &kp LEFT>
                ;
        };

        curb: curb {
            label = "Curly Braces";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp LBRC &kp RBRC &kp LEFT>
                ;
        };

        bracket: bracket {
            label = "Brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_tap &kp LBKT &kp RBKT &kp LEFT>
                ;
        };

        tdpar: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&paren>, <&kp LPAR>;
        };

        tdcurb: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&curb>, <&kp LBRC>;
        };

        tdbrkt: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bracket>, <&kp LBKT>;
        };

        tdmonl: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LA(LS(LC(N4))))) (LA(LS(LC(N4))))>, <&trans>;
        };

        tdmonm: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LA(LS(LC(N5))))) (LA(LS(LC(N5))))>, <&trans>;
        };

        tdmonr: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LA(LS(LC(N6))))) (LA(LS(LC(N6))))>, <&trans>;
        };

        tdmonbm: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LA(LS(LC(N1))))) (LA(LS(LC(N1))))>, <&trans>;
        };

        tdpaste: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LA(V))) (LG(V))>, <&kp (LG(LC(V)))>;
        };

        tdcopy: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(X)) (LG(C))>, <&trans>;
        };

        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            label = "GRAVE_ESCAPE";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

        td_ssfull: td_ssfull {
            compatible = "zmk,behavior-tap-dance";
            label = "Screenshot Full";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LC(LS(N3)))) (LG(LS(N3)))>, <&trans>;
        };

        td_ssnip: td_ssnip {
            compatible = "zmk,behavior-tap-dance";
            label = "Screenshot Snippet";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&mt (LG(LC(LS(N4)))) (LG(LS(N4)))>, <&trans>;
        };

    };

        macros {
        tips: tips {
            label = "TIPS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <20>;
            bindings
                = <&macro_tap &kp T &kp R &kp U &kp E &kp I &kp P &kp S &kp O &kp L &kp U &kp T &kp I &kp O &kp N &kp S &kp DOT &kp C &kp O &kp M>
                ;
          };

        pass: pass {
            label = "Pass";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LSFT>
                , <&macro_tap &kp M> 
                , <&macro_release &kp LSFT>
                , <&macro_tap &kp AT &kp T &kp T &kp H &kp E &kp W &kp N6 &kp N7 &kp N8 &kp N6 &kp RET>
                ;
          };

        app_sw: app_sw {
            label = "App Switcher";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp TAB>
                , <&macro_pause_for_release>
                , <&macro_release &kp LGUI>
                ;
          };

        selline: selline {
            label = "Select Line";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp LEFT> 
                , <&macro_press &kp LSFT>
                , <&macro_tap &kp RIGHT> 
                , <&macro_release &kp LSFT>
                , <&macro_release &kp LGUI>
                ;
          };

        selword: selword {
            label = "Select Word";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp LEFT> 
                , <&macro_press &kp LSFT>
                , <&macro_tap &kp RIGHT> 
                , <&macro_release &kp LSFT>
                , <&macro_release &kp LALT>
                ;
          };

        passpal: passpal {
            label = "Password Palette";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <20>;
            tap-ms = <30>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_press &kp LALT>
                , <&macro_press &kp LSFT>
                , <&macro_press &kp LCTRL>
                , <&macro_tap &kp P> 
                , <&macro_release &kp LGUI>
                , <&macro_release &kp LALT>
                , <&macro_release &kp LSFT>
                , <&macro_release &kp LCTRL>
                , <&macro_tap &sk LCTRL>
                ;
          };

        };

        combos {
        compatible = "zmk,combos";
          combo_esc {
              timeout-ms = <50>;
              key-positions = <1 2>;
              bindings = <&kp ESC>;
          };

          combo_enter {
              timeout-ms = <50>;
              key-positions = <32 33>;
              bindings = <&kp RET>;
          };

          combo_capsword {
              timeout-ms = <50>;
              key-positions = <15 20>;
              bindings = <&caps_word>;
          };

          combo_power {
              timeout-ms = <50>;
              key-positions = <1 2 38>;
              bindings = <&kp C_POWER>;
          };

          combo_pass {
              timeout-ms = <50>;
              key-positions = <9 10 39>;
              bindings = <&pass>;
          };
        };



        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
&trans		&kp Q       &kp W        &kp E        &kp R        &kp T 			                    &kp Y        &kp U        &kp I        &kp O        &kp P          &trans 
&trans		&lhm LALT A &lhm LCTRL S &lhm LSHFT D &lhm LGUI F  &kp G                          &kp H        &rhm RGUI J  &rhm RSHFT K &rhm RCTRL L &rhm RALT QUOT &trans
&trans		&lhm MEH Z  &kp X        &kp C        &kp V        &kp B			                    &kp N        &kp M        &kp CMMA     &kp DOT      &kp SLASH &trans
          				                &kp ESC &lth num BSPC &lth nav TAB                  &ltt mac SPACE     &hm LGUI RET  &lth fun ESC
		>;
		};

       		numpad_layer {
		bindings = <
&trans		&tdcurb      &kp RBRC           &tdpar          &kp RPAR       &tips 			     &kp GRAVE     &kp N7  &kp N8 &kp N9 &kp SLASH &trans    
&trans		&lhm LALT AT &lhm LCTRL BSLH    &lhm LSFT UNDER &lhm LGUI PIPE &trans          &kp MINUS     &kp N4  &kp N5 &kp N6 &kp SEMICOLON &trans
&trans		&tdbrkt      &kp RBKT           &trans          &trans         &trans			     &kp EQUAL     &kp N1  &kp N2 &kp N3 &kp DOT &trans
          				                           &trans &trans         &trans          &kp RET       &kp N0  &kp ESC
		>;
		};
		
		    navigation_layer {
		bindings = <
&trans		&trans   &kp LC(H) &app_sw    &kp LC(L) &td_ssfull             &trans   &selword   &selline &trans    &kp SPACE  &trans
&trans		&kp LALT &kp LCTRL &kp LSFT   &kp LGUI  &td_ssnip              &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
&trans		&trans   &trans    &tdcopy    &tdpaste  &trans  		        &trans   &trans   &trans &trans    &kp RET &trans
					                        &trans &trans    &trans          		&kp RET  &trans &trans
		>;
		};
		
		    function_layer {
		bindings = <
&trans		&bt BT_CLR   &trans              &trans       &trans       &bootloader        &bootloader &kp F7 &kp F8 &kp F9 &kp F10  &trans
&trans		&kp CAPS     &kp LS(LC(K_POWER)) &trans       &trans       &trans             &trans      &kp F4 &kp F5 &kp F6 &kp F11 &trans
&trans		&bt BT_SEL 0 &bt BT_SEL 1        &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &trans      &kp F1 &kp F2 &kp F3 &kp F12 &trans
					                              &trans    &trans       &trans             &trans      &trans &trans
		>;
		};
        
		    macro_layer {
		bindings = <
&trans		&trans   &trans   &trans   &trans   &tips    			              &kp C_VOL_UP   &kp C_PREV   &kp C_PP  &kp C_NEXT    &passpal  &trans
&trans		&trans   &trans   &trans   &trans   &trans                      &kp C_VOL_DN   &tdmonl  &tdmonm  &tdmonr  &kp RET &trans
&trans		&trans   &trans   &trans   &trans   &trans                      &trans   &kp MAXWIN     &tdmonbm  &trans       &kp RET &trans
					            &trans     &trans   &trans                      		&trans &trans &trans
		>;
		};
		
	};
};
